package main

import (
	"testing"
)

func TestPuzzle1Easy(t *testing.T) {
	puzzle := [][]string{{"5", "3", "0", "0", "7", "0", "0", "0", "0"},
		{"6", "0", "0", "1", "9", "5", "0", "0", "0"},
		{"0", "9", "8", "0", "0", "0", "0", "6", "0"},
		{"8", "0", "0", "0", "6", "0", "0", "0", "3"},
		{"4", "0", "0", "8", "0", "3", "0", "0", "1"},
		{"7", "0", "0", "0", "2", "0", "0", "0", "6"},
		{"0", "6", "0", "0", "0", "0", "2", "8", "0"},
		{"0", "0", "0", "4", "1", "9", "0", "0", "5"},
		{"0", "0", "0", "0", "8", "0", "0", "7", "9"}}
	// Passed by reference to solution is written to puzzle
	solveSudoku(puzzle)

	solved := isPuzzleSolved(puzzle)

	if !solved {
		t.Error("Should have been able to solve puzzle")
	}
}

func TestPuzzle2Easy(t *testing.T) {
	puzzle := [][]string{{"3", "0", "0", "8", "0", "1", "0", "0", "2"},
		{"2", "0", "1", "0", "3", "0", "6", "0", "4"},
		{"0", "0", "0", "2", "0", "4", "0", "0", "0"},
		{"8", "0", "9", "0", "0", "0", "1", "0", "6"},
		{"0", "6", "0", "0", "0", "0", "0", "5", "0"},
		{"7", "0", "2", "0", "0", "0", "4", "0", "9"},
		{"0", "0", "0", "5", "0", "9", "0", "0", "0"},
		{"9", "0", "4", "0", "8", "0", "7", "0", "5"},
		{"6", "0", "0", "1", "0", "7", "0", "0", "3"}}
	solveSudoku(puzzle)

	solved := isPuzzleSolved(puzzle)

	if !solved {
		t.Error("Should have been able to solve puzzle")
	}
}

func TestPuzzle3Easy(t *testing.T) {
	puzzle := [][]string{{"0", "2", "1", "0", "7", "6", "0", "0", "0"},
		{"4", "0", "0", "0", "0", "3", "0", "0", "2"},
		{"5", "0", "7", "0", "0", "9", "3", "0", "0"},
		{"0", "4", "6", "0", "0", "0", "2", "0", "9"},
		{"9", "8", "0", "0", "0", "0", "0", "5", "7"},
		{"2", "0", "5", "0", "0", "0", "4", "6", "0"},
		{"0", "0", "9", "2", "0", "0", "5", "0", "4"},
		{"8", "0", "0", "7", "0", "0", "0", "0", "6"},
		{"0", "0", "0", "1", "9", "0", "7", "3", "0"}}
	solveSudoku(puzzle)

	solved := isPuzzleSolved(puzzle)

	if !solved {
		t.Error("Should have been able to solve puzzle")
	}
}

func TestPuzzle4Medium(t *testing.T) {
	puzzle := [][]string{{"3", "6", "0", "0", "0", "0", "0", "0", "8"},
		{"2", "0", "0", "0", "0", "0", "0", "1", "0"},
		{"1", "0", "0", "4", "0", "0", "0", "0", "0"},
		{"0", "9", "0", "0", "6", "0", "0", "8", "2"},
		{"0", "8", "4", "0", "0", "0", "0", "0", "0"},
		{"0", "0", "0", "0", "3", "0", "6", "0", "5"},
		{"0", "0", "7", "0", "0", "5", "1", "0", "0"},
		{"0", "0", "0", "7", "0", "9", "0", "0", "0"},
		{"0", "0", "0", "0", "0", "0", "2", "0", "6"}}
	solveSudoku(puzzle)

	solved := isPuzzleSolved(puzzle)

	if !solved {
		t.Error("Should have been able to solve puzzle")
	}
}

func TestPuzzle5Medium(t *testing.T) {
	puzzle := [][]string{{"4", "0", "0", "0", "3", "9", "8", "0", "0"},
		{"0", "0", "9", "1", "0", "0", "7", "4", "0"},
		{"0", "0", "5", "0", "6", "0", "0", "9", "0"},
		{"9", "4", "0", "0", "0", "6", "0", "0", "0"},
		{"0", "0", "0", "5", "8", "2", "0", "0", "0"},
		{"0", "0", "0", "4", "0", "0", "0", "1", "8"},
		{"0", "5", "0", "0", "7", "0", "1", "0", "0"},
		{"0", "9", "4", "0", "0", "1", "5", "0", "0"},
		{"0", "0", "7", "8", "4", "0", "0", "0", "2"}}
	solveSudoku(puzzle)

	solved := isPuzzleSolved(puzzle)

	if !solved {
		t.Error("Should have been able to solve puzzle")
	}
}
